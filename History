DOCKER PROJECT:

1. CREATE 3 SERVERS AND INSTALL DOCKER ON ALL OF THEM & CREATE CLUSTER OF IT

yum install docker -y
systemctl start docker
systemctl status docker
docker swarm init --advertise-addr privare ip (only manager node)
docker node ls
===========================================================================================================================================================
2. INSTALLING JENKINS (MASTER)

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
amazon-linux-extras install java-openjdk11 -y 
yum install git maven jenkins -y
systemctl start jenkins.service
systemctl status jenkins.service

jenkins set up 
=======================================================================================================================================================
3. CREATE CUSTOM IMAGES AND PUSH TO DOCKERHUB WITH TAGS

DOCKER FILE:
FROM ubuntu
RUN apt-get update -y
RUN apt-get install apache2 -y
COPY index.html /var/www/html/
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

INDEX.HTML
=======================================================================================================================================================
CREATE PIPELINE 

pipeline {
    agent any

    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/Nerellaanjaneyulu/newdockerproject.git'
            }
        }
    }
}
BUILD NOW
===========================================================================================================================================================
4. CREATE IMAGE AND PUSH TO DOCKERHUB BY USING PARAMETERS (CHOICE PARAMETR)
pipeline {
    agent any

    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/Nerellaanjaneyulu/newdockerproject.git'
            }
        }
        stage('build') {
            steps {
                sh 'docker build -t $img .'
            }
        }
        stage('tag') {
            steps {
                sh 'docker tag $img $repo'
            }
        }
        stage('push') {
            steps {
                sh 'docker login -u name -p password '
                sh 'docker push $repo'
            }
        }    
    }
}
=====================================================================================================================================================================
5. GIVE PERMISSIONS

chmod 777 /var/run/docker.sock
systemctl daemon-reload
systemctl restart docker.service
=====================================================================================================================================================
   6. WRITE COMPOSE FILE AND PUSH TO GITHUB
version: '3'
services:
  uber:
    image: anjaneyulu02/uber:latest
    ports:
      - "81:80"
    deploy:
      replicas: 3

  swiggy:
    image: anjaneyulu02/swiggy:latest
    ports:
      - "82:80"
    deploy:
      replicas: 3

  zomato:
    image: anjaneyulu02/zomato:latest
    ports:
      - "83:80"
    deploy:
      replicas: 3

  pizza:
    image: anjaneyulu02/pizza:latest
    ports:
      - "84:80"
    deploy:
      replicas: 3

  kfc:
    image: anjaneyulu02/kfc:latest
  ports:
    - "84:80"
  deploy:
    replicas: 3
============================================================================================================================================
6. CREATE A NEW PIPELINE & DEPLOYMENT:
 
pipeline {
    agent any

    stages {
        stage('check') {
            steps {
                git 'https://github.com/Nerellaanjaneyulu/newdockerproject.git'
            }
        }
    }
}
=============================================================================================================================

pipeline {
    agent any

    stages {
        stage('check') {
            steps {
                git 'https://github.com/Nerellaanjaneyulu/newdockerproject.git'
            }
        }
         stage('stack') {
            steps {
                sh 'docker stack deploy -c docker-compose.yml apps'
            }
         }    
    }
}
===========================================================================================================================================






